/* .......*/ (comentarios largos)
//.... (comentarios cortos)

package nombre.del.paquete; (minusculas.minusculas finalizar punto y coma)

public class nombre { (modlea los objetos, lleva si o si "class" y finaliza en corchete abierto)

public static void + main(){ (definicion main como en psint algoritmo/finalgoritmo)

sentencia; (controla y modifica el flujo, temrina en ; y string en comillas)

}
}


Ctrl. + E : Borra línea de codigo donde estoy posicionado.
Ctrl. + S : Guarda los cambios en la clase que estoy posicionado.
Shift. + F6 : RUN main proyect (actual).
Alt. + Shift + F : Le da formato al código.(queda mas legible, ordenado)
Alt + Enter : Se usa sobre el texto subrayado para ver la sugerencia que nos hace el IDE cuando hay
algún error de sintaxis o se necesita realizar algún import o surround.
Ctrl. + Shift + : Hace una copia de la línea de código que estabas posicionado.
Shift + DELETE : Borra toda la línea de código donde estoy posicionada.
Ctrl. + Space : Completa el código que estamos escribiendo.
Ctrl. + U U : Convierte el código a mayúsculas.
Ctrl. + U L : Convierte el código a minúsculas.
Alt + Insert : Agrega constructores, métodos accesotes, propiedades.(codigos predeterminados)
Ctrl. + G : Ir numero de línea concreto(introducida x ventana auxiliar).
Ctrl. +[NOMBRECLASE] : Me despliega todas las características de la clase

Para completar formatos
if. + TAB : Genera los bloques if.
sout. + TAB : Genera los System.out.println
fori + TAB : Genera el codigo necesario para hacer un for.
sw + TAB : Genera el switch.
whilexp/whilen/whileit + TAB : Genera los bloques while.
dowhile + TAB : Genera los bloques dowhile.
PSVM + TAB : Genera la función main.

Para crear propios ATAJOS
Tools / Options / Editor / CodeTemplates / New :
-Primero voy a poner la abreviatura para llamar a mi “código”
-Luego escribo el código a utilizar

Tipos de Datos Primitivos
Primitivos: Son predefinidos por el lenguaje. La biblioteca Java proporciona clases asociadas a estos tipos que proporcionan métodos que facilitan su manejo.
byte
Es un entero con signo de 8 bits, el mínimo valor que se puede almacenar es -128 y el máximo valor es de 127 (inclusive).
short
Es un entero con signo de 16 bits. El valor mínimo es -32,768 y el valor máximo 32,767 (inclusive).
int
Es un entero con signo de 32 bits. El valor mínimo es -2,147,483,648 y el valor máximo es 2,147,483,64  (inclusive). Generalmente es la opción por defecto.
long
Es un entero con signo de 64 bits, el valor mínimo que puede almacenar este tipo de dato es -9,223,372,036,854,775,808 y el máximo valor es 9,223,372,036,854,775,807 (inclusive).
float
Es un número decimal de precisión simple de 32 bits (IEEE 754 Punto Flotante).
double
Es un número decimal de precisión doble de 64 bits (IEEE 754 Punto Flotante).
boolean
Este tipo de dato sólo soporta dos posibles valores: verdadero o falso y el dato es representado con tan solo un bit de información.
 
char
El tipo de dato carácter es un simple carácter unicode de 16 bits. Su valor mínimo es de '\u0000' (En entero es 0) y su valor máximo es de '\uffff' (En entero es 65,535). Nota: un dato de tipo carácter se puede escribir entre comillas simples, por ejemplo 'a', o también indicando su valor Unicode, por ejemplo '\u0061'.
String
Además de los tipos de datos primitivos el lenguaje de programación Java provee también un soporte especial para cadena de caracteres a través de la clase String.
Encerrando la cadena de caracteres con comillas dobles se creará de manera automática una nueva instancia de un objeto tipo String.
String cadena = “Sebastián”;
Los objetos String son inmutables, esto significa que una vez creados, sus valores no pueden ser cambiados. Si bien esta clase no es técnicamente un tipo de dato primitivo, el lenguaje le da un soporte especial y hace parecer como si lo fuera.

Operadores Aritméticos
+
Operador de Suma
-
Operador de Resta
*
Operador de Multiplicación
/
Operador de División
%
Operador de Módulo
Operadores Unarios
+
Operador Unario de Suma; indica que el valor es positivo.
-
Operador Unario de Resta; indica que el valor es negativo.
++
Operador de Incremento.
--
Operador de Decremento.

Operadores de Igualdad y Relación
==
Igual
!=
Distinto
> 
Mayor que
>=
Mayor o igual que
< 
Menor que
<=
Menor o igual que

Clase String
Método
Descripción.
charAt(int index)
Retorna el carácter especificado en la posición index
equals(String str)
Sirve para comparar si dos cadenas son iguales. Devuelve true si son iguales y false si no.
equalsIgnoreCase(String str)
Sirve para comparar si dos cadenas son iguales, ignorando la grafía de la palabra. Devuelve true si son iguales y false si no.
compareTo(String otraCadena)
Compara dos cadenas de caracteres alfabéticamente. Retorna 0 si son iguales, entero negativo si la primera es menor o entero positivo si la primera es mayor.
concat(String str)
Concatena la cadena del parámetro al final de la primera cadena.
contains(CharSequence s)
Retorna true si la cadena contiene la secuencia tipo char del parámetro.
endsWith(String suffix)
Retorna verdadero si la cadena es igual al objeto del parámetro
indexOf(String str)
Retorna el índice de la primera ocurrencia de la cadena del parámetro
isEmpty()
Retorna verdadero si la longitud de la cadena es 0
length()
Retorna la longitud de la cadena
replace(char oldChar, char newChar)
Retorna una nueva cadena reemplazando los caracteres del primer parámetro con el carácter del segundo parámetro
split(String regex)
Retorna un arreglo de cadenas separadas por la cadena del parámetro
startsWith(String prefix)
Retorna verdadero si el comienzo de la cadena es igual al prefijo del parámetro.
substring(int beginIndex)
Retorna la sub cadena desde el carácter del parámetro
substring(int beginIndex, int endIndex)
Retorna la sub cadena desde el carácter del primer parámetro hasta el carácter del segundo parámetro
toCharArray()
Retorna el conjunto de caracteres de la cadena
toLowerCase()
Retorna la cadena en minúsculas
toUpperCase()
Retorna la cadena en mayúsculas

Método
Descripción.
abs(double a)
Devuelve el valor absoluto de un valor double introducido como parámetro.
abs(int a)
Devuelve el valor absoluto de un valor Entero introducido como parámetro.
abs(long a)
Devuelve el valor absoluto de un valor long introducido como parámetro.
max(double a, double b)
Devuelve el mayor de dos valores double
max(int a, int b)
Devuelve el mayor de dos valores Enteros.
max(long a, long b)
Devuelve el mayor de dos valores long.
min(double a, double b)
Devuelve el menor de dos valores double.
min(int a, int b)
Devuelve el menor de dos valores enteros.
min(long a, long b)
Devuelve el menor de dos valores long.
pow(double a, double b)
Devuelve el valor del primer argumento elevado a la potencia del segundo argumento.
random()
Devuelve un double con un signo positivo, mayor o igual que 0.0 y menor que 1.0.
round(double a)
Devuelve el long redondeado más cercano al double introducido.
sqrt(double a)
Devuelve la raíz cuadrada positiva correctamente redondeada de un double.
floor(double a)
Devuelve el entero más cercano por debajo.

 
Método random() de la clase Math
El método random podemos utilizarlo para generar números al azar. El rango o margen con el que trabaja el método random oscila entre 0.0 y 1.0 (Este último no incluido)
Por lo tanto, para generar un número entero entre 0 y 9, hay que escribir la siguiente sentencia:
int numero = (int) (Math.random() * 10);


